Get interviews:
https://blog.usejournal.com/how-i-got-7-job-offers-in-8-weeks-part-1-please-interview-me-21e6f4ded106

Preparation:

https://medium.com/@yashgirdhar/11-companies-55-interviews-9-offers-including-google-and-amazon-heres-what-i-have-to-share-293852topc98f

https://blog.usejournal.com/how-i-got-into-google-161c97913b8b

#Any interview preparation involves mastering 5 important things. Coding, design, language specific concepts, previous projects and resume and last but not the least company specific reading.

#################################################### CODING ##################################################

LeetCode
See technical_coding_interview
pramp.com
https://www.udemy.com/course/data-structure-and-algorithms-analysis/
https://www.udemy.com/course/software-engineer-interview-unleashed/

############################################## LANGUAGE SPECIFIC CONCEPTS ############################################
                             

########4 Fundamental OOPs Concepts:##########

#Abstraction = Means that an abstract method is only declared but not implemented. Another class will inherit all non abstract methods and will only have to implement funcitonality to the abstract methods.

    Example: 
        class abstract Employee {}          //can have non abstract methods that FullTime and ParTime will inherit
        class FullTime extends Employee {}  //need to implement abstract methods. For example, timeWorked()
        class PartTime extends Employee {}  //need to implement abstract methods. For example, timeWorked()

#Polymorphism = Means "many forms". Classes that inherit from another can have a different implementation of a method. Depending on how the object is created is which implementation is going to be called.

    Example:
        class Person{ public void read(){...} }
        class Student extends Person{ public void read(){...} }

        Person p = new Person();
        Person s = new Student();
        p.read();
        s.read();                       //the methods called by p and s will be different since they are differently implemented

#Inheritance = lets us inherit attributes and methods from another class. A feature that represents the "is a" relationship between different classes.

    Example:
        class Person {}
        class Student extends Person {} //Student will inherit all Person's attributes and methods
                                        //Student "is a" Person

#Encapsulation = The process of wrapping the data (variables) and code acting on the data (methods) together as a single unit. In encapsulation, the variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class. Therefore, it is also known as data hiding.

    To achieve encapsulation in Java −
        Declare the variables of a class as private.
        Provide public setter and getter methods to modify and view the variables values.

###############################################

Function = Method = Procedure

Data = Characteristics = Properties = Attributes      

OOP = Define data type or data structures which becomes an object by including both data and functions

Unified Modeling Language (uml) = standard for languages such as having classes

Primitives = most basic data types available within the Java language. There are 8: boolean, byte, char, short, int, long, float and double

Literals = Any constant value which can be assigned to the variable is called as literal/constant

Variables = Reserved area allocated in memory. In other words, it is a name of memory location.
    -Local Variable = A variable declared inside the body of the method is called local variable. You can use this variable only within that method and the other methods in the class aren't even aware that the variable exists. A local variable cannot be defined with "static" keyword.
    -Instance Variable = A variable declared inside the class (outside of method), is called instance variable. It is not declared as static. It is called instance variable because its value is instance specific and is not shared among instances.
    -Static Variable = A variable which is declared as static is called static variable. It cannot be local. You can create a single copy of static variable and share among all the instances of the class. Memory allocation for static variable happens only once when the class is loaded in the memory.

Packages = A package in Java is used to group related classes. Think of it as a folder in a file directory. We use packages to avoid name conflicts, and to write a better maintainable code. Packages are divided into two categories:
    Built-in Packages (packages from the Java API)
    User-defined Packages (create your own packages)

Recursion = Function calls itself

Class = Determines how an object will behave and what the object will contain. In other words, it is a blueprint or a set of instruction to build a specific type of object.
    -Methods = A method is a block of code which only runs when it is called.
    -Modifiers : A class can be public or has default access
    -Class name: The name should begin with a initial letter (capitalized by convention).
    -Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.
    -Interfaces(if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.
    -Body: The class body surrounded by braces, { }.
    -Final: Method/variable can't be override

Data hiding = The process of hiding details of an object or function. Information hiding is a powerful programming technique because it reduces complexity.

Interface = the languages and codes that the applications use to communicate with each other and with the hardware.

Messaging = Message passing is a form of communication used in parallel programming and object-oriented programming.

Parallel programming = Write code that utilizes multiple cores of computer to make the program run faster.

Object = a self-contained entity that consists of both data and methods to manipulate the data.

Static = variables/fields and methods belongs to the class instead of the object (can be called without creating an object of the class). Only one copy of it and is shared across all objects declared from this class.  
         static class let us use a class within a class


Nested classes =    The nested class architecture is divided into two:
                        nested classes that are declared static are called static nested classes whereas,
                        nested classes that are non-static are called inner classes
                    The main difference between these two is that the inner classes have access to all member of the enclosing class (including private), whereas the static nested classes only have access to static members of the outer class.

Checked vs Unchecked Exceptions = Checked exceptions are checked during compile time and uncheked during runtime.
                    Checked Exceptions:
                                    SQLException
                                    IOException
                                    ClassNotFoundException
                                    InvocationTargetException
                    Unchecked Exceptions:
                                    NullPointerException
                                    ArrayIndexOutOfBoundsException
                                    ArithmeticException
                                    IllegalArgumentException
                                    NumberFormatException

Parameter Passing Conventions = Java is always passed by value. However, when we pass the value we are passing the reference to it.

Scope = The part of the program where the variable is accessible. For example, a method variable only lives withing the method.

JDK = Java Development Kit

    Is for Deveopment. 
    Includes JRE.
    Includes JVM.    

JRE = Java Runtime Environment

    It has the everything needed for Running the java programs.
    Includes JVM.

JVM = Java Virtual Machine

    Included in both JDK and JRE.   
    Converts byte code to machine specific code and provides platform independence. 

Concurrency = Ability to run several programs or several parts of a program in parallel.

Processes = Runs independently and isolated of other processes. 

Threads = 

Multi Threaded Programming and other techniques to improve CPU performance

Singleton = It's a software pattern where you can only create a Single instance of class. It's useful when exactly one object is needed to coordinate actions across the system

UI Dev:

    Angularjs = MVC
    React = Component Based Architecture
    Angular = 

    TypeScript vs Javascript = 

        JavaScript is a scripting language which helps you create interactive web pages.

        Typescript is a modern age Javascript development language. It is a statically compiled language to write clear and simple Javascript code. It can be run on Node js or any browser which supports ECMAScript 3 or newer versions.

    Component Based Architecture = Has reusability of components. A component is a software object, intended to interact with other components, encapsulating certain functionality or a set of functionalities.

    MVC = User uses controller which modifies models and updates the view
          Advantage of separating MVC is cleaner, more maintanable and sustainable code

          User uses Controller, which manipulates the Model, which updates the View, that the user sees

    What is the DOM? 

    Document Object Model is an interface to web pages. It is essentially an API to the page, allowing programs to read and manipulate the page’s content, structure, and styles.

    OO Design Pros:

    Reuse code with inheritance         (Inheritance)
    Flexibility by overriding methods   (Polymorphism)
    Break down solutions into bits of code by separating them into objects
    Easier to mantain

    MVVM =  Model-View-ViewModel is a structural design pattern. 

            Model holds application data. 
            View display to user. 
            ViewModel transform model data into values that can be displayed to View

    Electron = a popular framework that makes it easy to build desktop apps for macOS, Linux or Windows using familiar web technologies (HTML, JavaScript and CSS).

    Nodejs = The runtime environment for javascript. Equivalent to JRE to java. It has everything required to run a javascript program.

    npm = Default package manager for nodejs

    Server side 
        The “server” is a web application server at a remote location. A server side or back-end language runs its scripts before the HTML is loaded, not after. PHP is one of the most popular, as well as Ruby on Rails, ASP.NET and many others. They are called server side languages because their scripts are run not on your computer, but on the server which hosts the website and sends down the HTML code.

    Client side 
        The “client” is a web browser. Client side development is done almost exclusively in JavaScript. This is, of course, in addition to basic HTML and CSS code. The reason JavaScript is called a client side language is because it runs scripts on your computer after you’ve loaded a web page.

Web Applications stacks:
    LAMP
        Linux               (OS)
        Apache              (Webserver)
        MySQL               (Data persistence)
        PHP                 (Programming language)

        Pros: Lots of documentation. Years being used, very stable. Easy to learn.

        Variations:
            LAMP (with Perl or Python instead of PHP)
            LAMP (with MongoDB instead of MySQL)
            WAMP (Windows as OS)
            MAMP (Mac OS X as OS)
            XAMPP (Any OS + Perl or PHP + FTP Server)
            LAPP (PostgreSQL as database)

    MEAN
        MongoDB             (Data persistence)
        Express.js          (server-side application framework) Back-end web application framework running on top of Node.js
        Angular.js          (client-side application framework)
        Node.js             (server-side environment)

        Pros: Pure javascript. Ability to easily build mobile or desktop apps, for example with Ionic.

        Variations:
            MERN (React instead of Angular)
            MEEN (Ember.js instead of Angular)

    Other Stacks:

        WISA            Windows Server / IIS / Microsoft SQL Server / ASP.net
        Ruby Stack      Ruby/Ruby on Rails/RVM (Ruby Virtual Machine) / SQLite
        Java+Spring     Preferred by large enterprises and shied by indie developers for its complexity, 
                        Spring offers an entire full-stack framework written in Java.
        Django Stack    Python / Django / Apache / MySQL


Internet 
    end to end principle

    TCP/UDP

    SSL

    HTTP 

    NAT

Sprinboot
    HTTP verbs
        200 successful
        401 unathorized
        404 not found
    CRUD
    REST 
        GET
        PUT 
        PATCH 
        POST
        DELETE
    SOAP

    Spring MVC vs Springboot

Jenkins
    L
    Unit testing:
    Integration testing:
    System testing:
    Acceptance testing:

Database:
    Sql
        Has schemas
        MySQL
    Nosql: 

        MongoDB: schemaless data persistence and is faster than MySQL if you have a lot of read requests

    Schema: Design or list of attributes and instructions that tells the database how the data is organized and how the components are related.

        Example:
            Name-Last   Name-Middle Name-First  Name-Nick   Phone-AreaCD    Phone-Number
            Aden        K.          Samson      (Sam)       (555)           234-1221
            Joe         Brown                               (555)           234-1233

        Physical Schema − This schema pertains to the actual storage of data and its form of storage like files, indices, etc. It defines how the data will be stored in a secondary storage.

        Logical Schema − This schema defines all the logical constraints that need to be applied on the data stored. It defines tables, views, and integrity constraints.

############################################## PREVIOUS PROJECTS/RESUME ##############################################

Explain to them how you have collaborated with others in your past projects. The questions for this section could be either something specific, like a skill on your resume or about a project.

Could you tell me a little bit about the project you are most proud of?

Fill this
Common Questions                        <Work Experience>   <Side Projects> <Other things on Resume, all headings go here>
What Did you Do?
Challenges
Mistakes/ Failures
Enjoyed
Leadership
Conflicts
What You'd Do Differently
How would you scale the project?

############################################# COMPANY KNOWLEDGE/CURIOSITY ##############################################

Learn principles and vision of company
So why did you choose XYZ as your next endeavor?



This sections is usually ask for senior positions(10+ years)
#################################################### DESIGN ####################################################

Questions explaining design of systems/apps 
If you were to build a social networking website from scratch, how would you design the system?

https://www.hiredintech.com/classrooms/system-design/lesson/52
https://www.youtube.com/playlist?list=PLA8lYuzFlBqAy6dkZHj5VxUAaqr4vwrka
https://www.geeksforgeeks.org/design-scalable-system-like-instagram/
https://hackernoon.com/how-not-to-design-netflix-in-your-45-minute-system-design-interview-64953391a054
https://gist.github.com/vasanthk/485d1bottom5737e8e72759f
https://github.com/donnemartin/system-design-primer

System Design Basics
Key Characteristics of Distributed Systems
Load Balancing
Caching
Data Partitioning
Indexes
Proxies
Redundancy and Replication
SQL vs. NoSQL
CAP Theorem
Consistent Hashing
Long-Polling vs WebSockets vs Server-Sent Events

Design a URL Shortening service like TinyURL
Design Pastebin
Design Instagram
Design Dropbox or Google Drive
Design Facebook Messenger
Design Twitter
Design Youtube or Netflix
Design Typeahead Suggestion
Design an API Rate Limiter
Design Twitter Search
Design a Web Crawler or Type-Ahead (search engine related services)
Design Facebook’s Newsfeed
Design Quora, Reddit or Hackernews
Design Yelp or Nearby Friends
Design Uber backend
Design Ticketmaster 
playstore app
instagram
web browser
countdown app
swiggy rider app
Booking.com booking listings screen

